import { Command } from "@oclif/command";
import * as chalk from "chalk";
import { prompt } from "enquirer";
import * as execa from "execa";
import * as fs from "fs-extra";
import * as ora from "ora";
import * as path from "path";
import getInstallArgs from "./getInstallArgs";
import getInstallCmd from "./getInstallCmd";
import { installing } from "./installing";

const execSync = require("child_process").execSync;

class Cli extends Command {
  static args = [{ name: "folder" }];

  async createFolder(dir: string) {
    await fs.mkdirp(dir);
  }

  async copyTemplate(
    projectPath: string,
    folderName: string,
    templateType: string
  ) {
    // copy the template
    await fs.copy(
      path.resolve(__dirname, `../template/${templateType}`),
      projectPath,
      {
        overwrite: true,
      }
    );

    // issue with .gitignore file
    // See: https://github.com/npm/npm/issues/1862
    const gitignoreExists = fs.existsSync(path.join(projectPath, ".gitignore"));

    if (!gitignoreExists) {
      fs.moveSync(
        path.join(projectPath, "gitignore"),
        path.join(projectPath, ".gitignore")
      );
    }

    // rename project name in package.json
    const rawPkg = fs.readFileSync(
      path.resolve(projectPath, "./package.json"),
      "utf8"
    );
    const pkg = JSON.parse(rawPkg);
    delete pkg.name;
    delete pkg.description;

    fs.writeFileSync(
      path.resolve(projectPath, "./package.json"),
      JSON.stringify(
        {
          name: folderName,
          description: "generated by @tsxp/cli",
          ...pkg,
        },
        null,
        2
      )
    );
  }

  tryGitInit(projectPath: string) {
    try {
      process.chdir(projectPath);
      execSync("git --version", { stdio: "ignore" });

      execSync("git init", { stdio: "ignore" });
      ora().succeed("Initialized a git repository.");
    } catch {
      ora().succeed("Git repo not initialized.");
    }
  }

  async installDeps(projectPath: string) {
    const installSpinner = ora(
      installing(["@tsxp/core", "+ dev deps"])
    ).start();

    try {
      process.chdir(projectPath);

      const cmd = await getInstallCmd();
      await execa(cmd, getInstallArgs(cmd));

      installSpinner.succeed("Installed dependencies");
    } catch (e) {
      console.log(e);
      installSpinner.fail("Failed to install dependencies");
      process.exit(1);
    }
  }

  levelOptions = {
    "Advance: (Jest, eslint, prettier, alias imports)": "advance",
    Basic: "basic",
  };

  async run() {
    const { args } = this.parse(Cli);
    const questions = {
      type: "select",
      name: "level" as const,
      message: "Which @tsxp app template? ",
      choices: [
        "Basic",
        "Advance: (Jest, eslint, prettier, alias imports)",
      ] as const,
    };

    const { level } = await prompt<
      Record<typeof questions["name"], typeof questions["choices"][number]>
    >(questions);

    let folderName = args.folder;
    let projectPath = (await fs.realpath(process.cwd())) + "/" + folderName;

    console.log(
      chalk.blue(`
      ::::::::::: ::::::::: :::    ::: :::::::::  
          :+:    :+:    :+: :+:    :+: :+:    :+: 
          +:+    +:+         +:+  +:+  +:+    +:+ 
          +#+    +#++:++#++   +#++:+   +#+ # +:+  
          +#+           +#+ :+:    :+: +#+       
          #+#    #+#    #+# :+:    :+: #+#        
          ###     ########  :+:    :+: ###        
      `)
    );

    const bootSpinner = ora(`Creating ${chalk.bold.green(folderName)} ...`);

    const exists = await fs.pathExists(projectPath);
    if (exists) {
      bootSpinner.fail(`Failed to create ${chalk.bold.red(folderName)}`);

      const { _folderName } = await prompt<{ _folderName: string }>({
        type: "input",
        name: "_folderName",
        message: `A folder named ${chalk.bold.red(
          folderName
        )} already exists! ${chalk.bold("Choose a different name")}`,
        initial: folderName + "-1",
        result: (v: string) => v.trim(),
      });

      folderName = _folderName;
      projectPath = (await fs.realpath(process.cwd())) + "/" + folderName;
    }

    bootSpinner.start();
    await this.createFolder(projectPath);
    await this.copyTemplate(projectPath, folderName, this.levelOptions[level]);
    bootSpinner.stop();

    this.tryGitInit(projectPath);
    await this.installDeps(projectPath);

    const displayedCommand = await getInstallCmd();
    const isYarn = displayedCommand === "yarn";

    console.log();
    console.log(`Success! Created ${folderName} at ${projectPath}`);
    console.log("Inside that directory, you can run several commands:");
    console.log();
    console.log(chalk.cyan(`  ${displayedCommand} ${isYarn ? "" : "run "}dev`));
    console.log("    Starts the development server.");
    console.log();
    console.log(
      chalk.cyan(`  ${displayedCommand} ${isYarn ? "" : "run "}build`)
    );
    console.log("    Build with tsc.");
    console.log();
    console.log(
      chalk.cyan(`  ${displayedCommand} ${isYarn ? "" : "run "}start`)
    );
    console.log("    Start the production build.");
    console.log();
    console.log(chalk.cyan("  cd"), folderName);
    console.log(`  ${chalk.cyan(`${displayedCommand} dev`)}`);
    console.log();
    console.log("Happy hacking!");
  }
}

export = Cli;
